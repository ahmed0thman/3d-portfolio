/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useState } from "react";
import { Float, useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

const Cube = ({ ...props }) => {
  const { nodes } = useGLTF("models/cube.glb");

  const texture = useTexture("textures/cube.png");

  const cubeRef = useRef();
  const [hovered, setHovered] = useState(false);

  useFrame(() => {
    if (cubeRef.current) {
      cubeRef.current.rotation.y += hovered ? 0.04 : 0.02;
      cubeRef.current.rotation.x += hovered ? 0.04 : -0.02;
    }
  });

  return (
    <Float floatIntensity={2} scale={1}>
      <group
        position={[9, -4, 0]}
        rotation={[2.6, 0.8, -1.8]}
        scale={0.74}
        dispose={null}
        {...props}
      >
        <mesh
          ref={cubeRef}
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={nodes.Cube.material}
          onPointerEnter={() => setHovered(true)}
        >
          <meshMatcapMaterial matcap={texture} toneMapped={false} />
        </mesh>
      </group>
    </Float>
  );
};

useGLTF.preload("models/cube.glb");

export default Cube;
